name: compute_raster_cluster
inputs:
  input_raster: Raster
output:
  output_raster: Raster
parameters:
  clustering_method: "overlap_clustering"
  number_classes: 4 # we keep this number of clusters low as we want to distinguish between crop and non-crop
  half_side_length: 21 # we keep this number of pixels low as we are looking for local differences
  number_iterations: 2 # during tests, this number provided a good balance between speed and good results
  stride: 8 # instead of calculating the cluster on each pixel, we skip X strides and interpolate the result
  warmup_steps: 0 # we keep this parameter zero as we don't want to run a larger cluster at the beginning
  warmup_half_side_length: 127 # size of the window for the initial larger clustering process. ignored when warmup_steps = 0
  window: 1024
dependencies:
  parameters:
    - clustering_method
    - number_classes
    - half_side_length
    - number_iterations
    - stride
    - warmup_steps
    - warmup_half_side_length
    - window
entrypoint:
  file: compute_raster_cluster.py
  callback_builder: CallbackBuilder
description:
  short_description: Computes local clusters using an overlap clustering method.