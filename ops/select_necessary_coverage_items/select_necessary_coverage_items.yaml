name: select_necessary_coverage_items
inputs:
  bounds_items: List[DataVibe]
  items: List[DataVibe]
output:
  # @INHERIT will make the corresponding port to inherit the type of the port which feeds the
  # input in parentheses.
  filtered_items: "@INHERIT(items)"
entrypoint:
  file: filter_items.py
  callback_builder: callback_builder
parameters:
  # Minimum amount of overlap to consider a group, should not be higher than within_threshold
  # Between 0 and 1
  min_cover: .99
  # Intersection threshold to consider a geometry is within another
  # Between 0 and 1
  within_threshold: .99
  max_items: null # null to consider all items
  # Attribute used to group items
  group_attribute: "time_range"
dependencies:
  parameters:
    - min_cover
    - within_threshold
    - max_items
    - group_attribute
description:
  short_description: Select items necessary to spatially cover the geometry of the bounds items.
  long_description:
    The op will be group items according to the chosen attribute and then select the necessary items
    from each group, provided the group is able to cover the bounds. Items are selected
    independently for each of the bounds items and then deduplicated in the end.
  inputs:
    bounds_items: Items whose geometries should be covered.
    items: Items that will be selected.
  output:
    filtered_items: Items necessary to cover the geometries.
  parameters:
    min_cover: Minimum amount of cover required for a group to be used.
    within_threshold:
      Threshold of relative interesection are for a geoemtry to be contained by another.
    max_items:
      Maximum number of items per group that can be used to cover a geometry. `None` for no limit.
    group_attribute: Which attribute should be used to group the items.
